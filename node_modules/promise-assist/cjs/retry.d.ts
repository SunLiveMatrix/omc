export interface IRetryOptions {
    /**
     * Number of times to retry action if it rejects.
     * Pass `Infinity` for infinite retries.
     *
     * @default 3
     */
    retries?: number;
    /**
     * Delay in ms between trials.
     *
     * @default 0 (no delay)
     */
    delay?: number;
    /**
     * Timeout in ms to stop trying.
     *
     * @default 0 (no timeout)
     */
    timeout?: number;
}
/**
 * Executes provided `action` and returns its value.
 * If `action` throws or rejects, it will retry execution
 * several times before failing.
 *
 * @param action sync or async callback
 * @param options customize behavior
 */
export declare function retry<T>(action: () => T | Promise<T>, options?: IRetryOptions): Promise<T>;
/**
 * @param options defaults to `{delay: 10, timeout: 1000, retries: Infinity }`
 */
export declare function waitFor<T>(action: () => T | Promise<T>, options?: IRetryOptions): Promise<T>;
//# sourceMappingURL=retry.d.ts.map